>
    <input
      id="fader"
      type="range"
      min="-100"
      max="100"
      class="fader"
      value="0"
      list="fader_labels"
      @input="emitPitch"
    />
    <datalist id="fader_labels">
      <option
        v-for="label in pitchLabels"
        v-bind:label="label.text"
        v-bind:value="label.value"
        v-bind:key="label.value"
      ></option>
    </datalist>
    <div class="readable">{{ pitchReadable }}%</div>
  </div>
</template>

<script lang="ts">
import { defineComponent, computed } from "vue"

export default defineComponent({
  name: "PitchFader",
  props: ["pitch"],
  setup(props, { emit }) {
    const pitchOptions = [{}]
    const pitchLabels = [
      { text: "-8", value: 0 },
      { text: "6", value: 12.5 },
      { text: "4", value: 25 },
      { text: "2", value: 37.5 },
      { text: "0", value: 50 },
      { text: "2", value: 62.5 },
      { text: "4", value: 75 },
      { text: "6", value: 87.5 },
      { text: "+8", value: 100 },
    ]
    const emitPitch = (event: Event) => {
      const target = event.target as HTMLInputElement
      if (target) emit("changePitch", Number(target.value) * -1) // * -1 as input could not be reversed when vertical
    }
    const pitchReadable = computed(() => (props.pitch * 0.08).toFixed(1))

    return { emitPitch, pitchReadable, pitchLabels }
  },
})
</script>

<style scoped lang="scss">
datalist {
  display: block;
  option {
    height: 10px;
  }
}

$thumb-w: 2.25em;
$track-w: 19.75em;
$track-h: 0.5em;
$thumb-h: 4 * $track-h;
$track-pad: 0.125em;
$thumb-sh-c: #111;
$track-bg: #999;

$diff-h: ($thumb-h - $track-h)/2;

@mixin track() {
  box-sizing: border-box;
  padding: $track-pad;
  width: 100%;
  height: 30/350 * 100%;
  background: #222;
}

@mixin thumb() {
  box-sizing: border-box;
  width: 60%;
  height: $thumb-h;
  background: linear-gradient(#222, #222) 50% 100% border-box,
    linear-gradient(#272727, #7b7b7b) 50% calc(100% - 0.125em) border-box,
    linear-gradient(135deg, #404040, #272727, #7b7b7b, #cfd0d2) 50%
      calc(100% - 1px) border-box,
    linear-gradient(135deg, #404040, #272727, #7b7b7b, #898989) 50% 100%
      border-box,
    linear-gradient(
        90deg,
        #7d7d7d,
        #000000 25%,
        #000000 65%,
        #6d6d6d 75%,
        #202020 92%,
        #adadad 98%
      )
      content-box,
    linear-gradient(90deg, #606060, #000000, #000000, #808080) padding-box,
    linear-gradient(90deg, #6b6b6b, #000000, #000000, #939393) border-box;
  background-repeat: no-repeat;
  background-size: 0.1em 4em, 2.95em 4.75em, 3.075em 4.875em, 3.2em 5em,
    100% 100%, 100% 100%, 100% calc(100% - 0.375em);
  cursor: ns-resize;
}

input[type="range"] {
  &,
  &::-webkit-slider-runnable-track,
  &::-webkit-slider-thumb {
    -webkit-appearance: none;
  }

  height: 16/350 * 100%;
  width: 123/450 * 100%;
  background-image: url("./svg/dot-texture.svg");
  border-radius: 0;
  position: absolute;
  bottom: 21%;
  right: -19.7%;
  padding: 0;
  margin: 0;
  transform: translate(-50%, -50%) rotate(-90deg) scaleY(-1);
  background: #bbb;
  font-size: 1em;
  cursor: pointer;

  &::-webkit-slider-runnable-track {
    @include track();
  }
  &::-moz-range-track {
    @include track();
  }
  &::-ms-track {
    border: none;
    @include track();
    color: transparent;
  }

  &::-webkit-slider-thumb {
    margin-top: -$diff-h - $track-pad;
    @include thumb();
  }
  &::-moz-range-thumb {
    @include thumb();
  }
  &::-ms-thumb {
    @include thumb();
  }

  &::-ms-fill-lower,
  &::-ms-tooltip {
    display: none;
  }
}
</style>
